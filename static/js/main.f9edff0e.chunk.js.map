{"version":3,"sources":["images/rsz_ogmodh0.png","images/transparent.png","images/Tbadge-junior.png","images/Tbadge-senior.png","images/Tbadge-expert.png","store/board/types.js","store/board/actions.js","store/game/types.js","store/game/actions.js","components/buttons/MineButton.js","components/board/Board.js","components/buttons/GameBtn.js","components/game/Settings.js","components/screen/Success.js","components/welcome/Welcome.js","components/game/ChangeSettings.js","App.js","serviceWorker.js","store/board/reducer.js","store/game/reducer.js","index.js"],"names":["module","exports","boardTypes","BUILD","CLICKED","RIGHT_CLICKED","REDUCE_MINE_LEFT","INCREASE_MINE_LEFT","CHECK_CELL","EMPTY","SAVE_CHANGE","CHANGE_LEVEL","CHANGE_SIZE","RESTART_GAME","FAILED","FINISH","RESET","cellClicked","cellId","res","split","type","action","cellRightClick","reduceMineLeft","increaseMineLeft","recCheckCell","mat","checkCell","id","row","parseInt","col","tempMat","value","mark","open","error","failed","payload","buildBoard","size","lvl","amountOfMines","Math","ceil","matrix","mineLeft","i","j","mine","randomLine","random","randomCol","checkAndSetCloseToMine","amountOfCellToBeOpen","length","map","cell","resetBoard","finish","boardSize","amountOfOpenCells","amountOfCells","intvalue","gameTypes","resetSettings","loading","pause","pauseFlag","changeSettings","settingsFlag","MineButton","props","board","useSelector","state","dispatch","useDispatch","className","aria-hidden","style","color","backgroundColor","useState","longpress","start","setstate","leftClickHandle","onMouseDown","e","preventDefault","tempStart","Date","getTime","onMouseUp","window","event","fail","target","which","onTouchStart","onTouchEnd","onMouseLeave","disabled","Board","useEffect","time","amountCellShouldBeOpen","boardTemplate","key","clicked","rightClicked","GameBtn","Button","variant","onClick","onclick","text","Settings","settings","setting","interval","setInterval","clearInterval","restartAll","toggle","Success","minutes","floor","seconds","timeText","Welcome","width","height","backgroundImage","background","src","image","alt","close","href","ChangeSettings","explanationHTML","lvlName","precentage","noOfCells","explanation","Slider","defaultValue","step","marks","getAriaValueText","min","max","valueLabelDisplay","onChange","newValue","junior","senior","expert","App","gameOn","page","checkPage","CircularProgress","showImage","setShowImage","overflow","isLoading","Boolean","location","hostname","match","initialState","getCell","filter","obj","boardReducer","tempBoard","collumn","tempCell","newAmountOpen","tempDoubleBoard","rowRIGHT","collumnRIGHT","tempCellRIGHT","finished","restart","success","newTime","rootReducer","combineReducers","gameReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,iMCA9BC,EAAa,CAEtBC,MAAO,QACPC,QAAS,UACTC,cAAe,gBACfC,iBAAkB,mBAClBC,mBAAoB,qBACpBC,WAAY,aACZC,MAAO,QACPC,YAAa,cAIbC,aAAc,eACdC,YAAa,cACbC,aAAc,eACdC,OAAQ,SACRC,OAAQ,SACRC,MAAO,SCfEC,EAAc,SAACC,GACxB,IAAMC,EAAMD,EAAOE,MAAM,KAEzB,MAAO,CACHC,KAAMnB,EAAWE,QACjBkB,OAAQH,IAGHI,EAAiB,SAACL,GAC3B,IAAMC,EAAMD,EAAOE,MAAM,KAEzB,MAAO,CACHC,KAAMnB,EAAWG,cACjBiB,OAAQH,IAGHK,EAAiB,WAC1B,MAAO,CACHH,KAAMnB,EAAWI,mBAIZmB,EAAmB,WAC5B,MAAO,CACHJ,KAAMnB,EAAWK,qBAWnBmB,EAAe,SAACR,EAAQS,GAC1BC,EAAUV,EAAOW,GAAIF,IAEZC,EAAY,SAACV,EAAQS,GAC9B,IAAMR,EAAMD,EAAOE,MAAM,KACnBU,EAAMC,SAASZ,EAAI,IAAKa,EAAMD,SAASZ,EAAI,IAC7Cc,EAAUN,EACd,GAAkC,IAA9BA,EAAIR,EAAI,IAAIA,EAAI,IAAIe,OAA4C,IAA7BP,EAAIR,EAAI,IAAIA,EAAI,IAAIgB,KAAY,CACnE,IACSF,EAAQH,EAAM,GAAGE,GAAKI,MAAuC,IAA/BH,EAAQH,EAAM,GAAGE,GAAKG,OACrDF,EAAQH,EAAM,GAAGE,GAAKI,MAAO,EACO,IAAhCH,EAAQH,EAAM,GAAGE,GAAKE,OACtBR,EAAaO,EAAQH,EAAM,GAAGE,GAAMC,IAG9C,MAAOI,IAGT,IACSJ,EAAQH,EAAM,GAAGE,GAAKI,MAAuC,IAA/BH,EAAQH,EAAM,GAAGE,GAAKG,OACrDF,EAAQH,EAAM,GAAGE,GAAKI,MAAO,EACO,IAAhCH,EAAQH,EAAM,GAAGE,GAAKE,OACtBR,EAAaO,EAAQH,EAAM,GAAGE,GAAMC,IAG9C,MAAOI,IAGT,IACSJ,EAAQH,GAAKE,EAAM,GAAGI,MAAuC,IAA/BH,EAAQH,GAAKE,EAAM,GAAGG,OACrDF,EAAQH,GAAKE,EAAM,GAAGI,MAAO,EACO,IAAhCH,EAAQH,GAAKE,EAAM,GAAGE,OACtBR,EAAaO,EAAQH,GAAKE,EAAM,GAAIC,IAG9C,MAAOI,IAGT,IACSJ,EAAQH,GAAKE,EAAM,GAAGI,MAAuC,IAA/BH,EAAQH,GAAKE,EAAM,GAAGG,OACrDF,EAAQH,GAAKE,EAAM,GAAGI,MAAO,EACO,IAAhCH,EAAQH,GAAKE,EAAM,GAAGE,OACtBR,EAAaO,EAAQH,GAAKE,EAAM,GAAIC,IAG9C,MAAOI,IAGT,IACSJ,EAAQH,EAAM,GAAGE,EAAM,GAAGI,MAA2C,IAAnCH,EAAQH,EAAM,GAAGE,EAAM,GAAGG,OAC7DF,EAAQH,EAAM,GAAGE,EAAM,GAAGI,MAAO,EACO,IAApCH,EAAQH,EAAM,GAAGE,EAAM,GAAGE,OAC1BR,EAAaO,EAAQH,EAAM,GAAGE,EAAM,GAAIC,IAGlD,MAAOI,IAGT,IACSJ,EAAQH,EAAM,GAAGE,EAAM,GAAGI,MAA2C,IAAnCH,EAAQH,EAAM,GAAGE,EAAM,GAAGG,OAC7DF,EAAQH,EAAM,GAAGE,EAAM,GAAGI,MAAO,EACO,IAApCH,EAAQH,EAAM,GAAGE,EAAM,GAAGE,OAC1BR,EAAaO,EAAQH,EAAM,GAAGE,EAAM,GAAIC,IAGlD,MAAOI,IAGT,IACSJ,EAAQH,EAAM,GAAGE,EAAM,GAAGI,MAA2C,IAAnCH,EAAQH,EAAM,GAAGE,EAAM,GAAGG,OAC7DF,EAAQH,EAAM,GAAGE,EAAM,GAAGI,MAAO,EACO,IAApCH,EAAQH,EAAM,GAAGE,EAAM,GAAGE,OAC1BR,EAAaO,EAAQH,EAAM,GAAGE,EAAM,GAAIC,IAGlD,MAAOI,IAGT,IACSJ,EAAQH,EAAM,GAAGE,EAAM,GAAGI,MAA2C,IAAnCH,EAAQH,EAAM,GAAGE,EAAM,GAAGG,OAC7DF,EAAQH,EAAM,GAAGE,EAAM,GAAGI,MAAO,EACO,IAApCH,EAAQH,EAAM,GAAGE,EAAM,GAAGE,OAC1BR,EAAaO,EAAQH,EAAM,GAAGE,EAAM,GAAIC,IAGlD,MAAOI,UAKR,GAAIV,EAAIR,EAAI,IAAIA,EAAI,IAAIe,OAAS,IAAmC,IAA7BP,EAAIR,EAAI,IAAIA,EAAI,IAAIgB,KAE5D,OADAF,EAAUK,EAAOX,GACV,CACHN,KAAMnB,EAAWY,OACjBmB,WAGR,MAAO,CACHZ,KAAMnB,EAAWM,WACjB+B,QAASN,IAKJO,EAAa,SAACC,EAAMC,GAO7B,IAJA,IAAMC,EAAwB,IAARD,EAAYE,KAAKC,KAAK,IAAOJ,EAAOA,GAC5C,IAARC,EAAYE,KAAKC,KAAK,GAAMJ,EAAOA,GAC/BG,KAAKC,KAAK,GAAOJ,EAAOA,GAC9BK,EAAS,GAAIC,EAAWJ,EACnBK,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC3BF,EAAOE,GAAK,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAMQ,IACtBH,EAAOE,GAAGC,GAAK,CAAEpB,GAAG,GAAD,OAAKmB,EAAL,YAAUC,GAAKC,MAAM,EAAOd,MAAM,EAAOF,MAAO,EAAGC,KAAM,GAGpF,KAAsB,IAAbY,GAAiB,CACtB,IAAII,EAAaP,KAAKC,KAAKD,KAAKQ,SAAWX,EAAO,GAAIY,EAAYT,KAAKC,KAAKD,KAAKQ,SAAWX,EAAO,GAC9FK,EAAOK,GAAYE,GAAWH,OAC/BJ,EAAOK,GAAYE,GAAa,CAAExB,GAAG,GAAD,OAAKsB,EAAL,YAAmBE,GAAaH,MAAM,EAAMd,MAAM,EAAOF,MAAO,GAAIC,KAAM,GAC9GY,KAKR,OAFAO,EAAuBR,EAAQL,GAExB,CACHpB,KAAMnB,EAAWC,MACjBmB,OAAQwB,EACRH,gBACAY,qBALoBd,EAAOA,EAAQE,IASrCW,EAAyB,SAAC3B,EAAKc,GACjC,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAMO,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAMQ,IACtB,IACQtB,EAAIqB,GAAGC,GAAGC,OACA,IAANF,EACU,IAANC,GACAtB,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,GAEtBe,IAAMtB,EAAI6B,OAAS,GACxB7B,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,IAG3BP,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,EAC3BP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,GAG1Bc,IAAMrB,EAAI6B,OAAS,EACd,IAANP,GACAtB,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,GAEtBe,IAAMtB,EAAI6B,OAAS,GACxB7B,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,IAG3BP,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,EAC3BP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,GAGpB,IAANe,GACLtB,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,EAC3BP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,GAEtBe,IAAMtB,EAAI6B,OAAS,GACxB7B,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,EAC3BP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,IAG3BP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,EAC3BP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,EAC3BP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,EAC3BP,EAAIqB,EAAI,GAAGC,GAAGf,OAAS,EACvBP,EAAIqB,EAAI,GAAGC,EAAI,GAAGf,OAAS,EAC3BP,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,EACvBP,EAAIqB,GAAGC,EAAI,GAAGf,OAAS,IAGjC,MAAOG,MASRC,EAAS,SAACX,GACnB,IAAIM,EAAUN,EAYd,OAXAM,EAAQwB,KAAI,SAAA3B,GACRA,EAAI2B,KAAI,SAAAC,GACAA,EAAKR,OACLQ,EAAKtB,MAAO,SAQjBH,GAEE0B,EAAa,WACtB,MAAO,CACHtC,KAAMnB,EAAWc,QAGZ4C,EAAS,SAACjC,EAAKkC,EAAWlB,GACnC,IAAIiB,EAAS,EAAGE,EAAoB,EAAGC,EAAgBF,EAAYA,EAC7DG,EAAWpB,KAAKC,KAAKF,GAa3B,OAXAhB,EAAI8B,KAAI,SAAA3B,GACJA,EAAI2B,KAAI,SAAAC,GACAA,EAAKR,KACa,IAAdQ,EAAKvB,OACLyB,EAAS,GAERF,EAAKtB,MACV0B,UAGZA,EAAoBC,EAAgBD,EAChCF,GAAUI,IAAaF,EAChB,CACHzC,KAAMnB,EAAWa,QAGlB,CACHM,KAAMnB,EAAWO,QClSZwD,EAEH,OAFGA,EAKK,eALLA,EAMF,QANEA,EAOA,UAPAA,EAQC,WCGDC,EAAgB,WACzB,MAAO,CACH7C,KAAM4C,IAIDE,EAAU,WACnB,MAAO,CACH9C,KAAM4C,IAKDG,EAAQ,SAACC,GAClB,IAAMD,EAAsB,IAAdC,EAAkB,EAAI,EACpC,MAAO,CACHhD,KAAM4C,EACN1B,QAAS6B,IAMJE,EAAiB,SAACC,GAE3B,MAAO,CACHlD,KAAM4C,EACN1B,QAH8B,IAAjBgC,EAAqB,EAAI,I,OC0E/BC,EAnGI,SAACC,GAChB,IAAMC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SACnCG,EAAWC,cAsBX5C,EApBGuC,EAAMf,KAAKtB,KAURqC,EAAMf,KAAKxB,OAAS,GACb,uBAAG6C,UAAU,aAAaC,cAAY,SACnB,IAArBP,EAAMf,KAAKxB,MACT,KAGAuC,EAAMf,KAAKxB,MAfH,IAAfuC,EAAMtC,KACC,uBAAG4C,UAAU,aAAaC,cAAY,SAEzB,IAAfP,EAAMtC,KACJ,uBAAG4C,UAAU,iBAAiBC,cAAY,SAE1C,KAcbC,EAAQ,CACVC,MAAOT,EAAMf,KAAKxB,OAAS,IAAMuC,EAAMf,KAAKtB,KAAO,QAA+B,IAArBqC,EAAMf,KAAKxB,OAAeuC,EAAMf,KAAKtB,KAAO,UAAiC,IAArBqC,EAAMf,KAAKxB,OAAeuC,EAAMf,KAAKtB,KAAO,UAAiC,IAArBqC,EAAMf,KAAKxB,OAAeuC,EAAMf,KAAKtB,KAAO,MAASqC,EAAMf,KAAKtB,MAA4B,IAApBqC,EAAMf,KAAKvB,KAA0BsC,EAAMf,KAAKtB,MAA4B,IAApBqC,EAAMf,KAAKvB,KAAyB,QAAZ,UAAxD,UAC7QgD,gBAAiBV,EAAMf,KAAKR,MAAQuB,EAAMf,KAAKtB,KAAO,MAAQ,MA3BxC,EA8BAgD,mBAAS,CAAEC,UAAW,IAAKC,MAAO,IA9BlC,mBA8BnBV,EA9BmB,KA8BZW,EA9BY,KAgCpBC,EAAkB,WACpBX,EAAS5D,EAAYwD,EAAMf,KAAK7B,KAChCgD,EAASjD,EAAU6C,EAAMf,KAAK7B,GAAI4C,EAAMC,MAAMA,QAC9CG,EAASjB,EAAOc,EAAMA,MAAOA,EAAMjC,KAAMiC,EAAM/B,iBAE7C8C,EAAc,SAACC,GACjBA,EAAEC,iBACF,IAAIC,GAAY,IAAIC,MAAOC,UAC3BP,EAAS,2BAAKX,GAAN,IAAaU,MAAOM,MAO1BG,EAAY,SAACL,GAIf,GAHAA,EAAEC,iBACFD,EAAIA,GAAKM,OAAOC,OAEXxB,EAAMf,KAAKtB,OAASsC,EAAMwB,KAE3B,IAAI,IAAIL,MAAOC,WAAclB,EAAMU,MAAQV,EAAMS,WACzCX,EAAM/B,cAAgB,GAA4B,eAAvB+C,EAAES,OAAOpB,YACpCF,EAAStD,EAAekD,EAAMf,KAAK7B,KACf,IAApB4C,EAAMf,KAAKvB,KACX0C,EAASrD,KACgB,IAApBiD,EAAMf,KAAKvB,MAChB0C,EAASpD,UAGb,OAAQuE,OAAOC,MAAMG,OACjB,KAAK,EAIL,KAAK,EACDZ,IACA,MAEJ,KAAK,GACGd,EAAM/B,cAAgB,GAA4B,eAAvB+C,EAAES,OAAOpB,YACpCF,EAAStD,EAAekD,EAAMf,KAAK7B,KACf,IAApB4C,EAAMf,KAAKvB,MAAcuC,EAAM/B,cAAgB,EAC/CkC,EAASrD,KACgB,IAApBiD,EAAMf,KAAKvB,MAChB0C,EAASpD,KAEb,MACJ,QACI,OAAQ,IAM5B,OACI,4BACI4E,aAAcZ,EAAaa,WAAYP,EACvCN,YAAaA,EAAac,aA/Cb,SAACb,GAClBA,EAAEC,iBACFJ,EAAS,2BAAKX,GAAN,IAAaU,MAAO,MA6C8BS,UAAWA,EACjES,SAAU/B,EAAMf,KAAKtB,KACrB6C,MAAOA,EACPF,UAA+B,IAApBN,EAAMf,KAAKvB,KAAa,WAAiC,IAApBsC,EAAMf,KAAKvB,KAAa,eAAiB,eACxFD,ICjDEuE,EAzCD,SAAAhC,GACV,IAAMC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SACnCG,EAAWC,cAEjB4B,qBAAU,WAMN,OALmB,IAAfhC,EAAMiC,OACN9B,EAASV,KACTU,EAASrC,EAAWkC,EAAMjC,KAAMiC,EAAMhC,MACtCmC,EAASV,MAEN,kBAAM,QAEd,CAACO,EAAMhC,IAAKgC,EAAMjC,OAErBiE,qBAAU,YACsB,IAAxBhC,EAAM/B,eAAuB+B,EAAMkC,wBAA0B,IAC7D/B,EAASjB,EAAOc,EAAMA,MAAOA,EAAMjC,KAAMiC,EAAM/B,kBACpD,CAAC+B,EAAM/B,gBAEV,IAAMkE,EAAgBnC,EAAMA,MAAMjB,KAAI,SAAC3B,EAAKgF,GACxC,OACI,yBAAK/B,UAAU,MAAM+B,IAAKA,GACrBhF,EAAI2B,KAAI,SAACC,EAAMoD,GAAP,OACL,yBAAK/B,UAAU,OAAO+B,IAAKA,EAAKjF,GAAI6B,EAAK7B,IACrC,kBAAC,EAAD,CAAY6C,MAAOA,EAAOxC,MAAOwB,EAAKxB,MAAOC,KAAMuB,EAAKvB,KAAMuB,KAAMA,EAAMqD,QAAS,kBAAMlC,EAAS5D,EAAYyC,EAAK7B,MAAMmF,aAAc,kBAAMnC,EAAStD,EAAemC,EAAK7B,gBAO9L,OACI,6BACI,yBAAKkD,UAAU,SACV8B,K,QCpCFI,EATC,SAACxC,GAEb,OACI,kBAACyC,EAAA,EAAD,CAAQzE,KAAK,QAAQ0E,QAAQ,YAAYjC,MAAM,UAAUH,UAAU,aAAaqC,QAAS3C,EAAM4C,SAC1F5C,EAAM6C,OCmEJC,EA3DE,WACb,IAAMC,EAAW7C,aAAY,SAAAC,GAAK,OAAIA,EAAM6C,WACtC/C,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SACnCG,EAAWC,cACjB4B,qBAAU,WACN,IAAIgB,EAAW,KAKf,OAJKF,EAASpD,OAAUM,EAAMN,QAC1BsD,EAAWC,aAAY,WACnB9C,EJjBL,CACHxD,KAAM4C,MIiBC,MACA,kBAAM2D,cAAcF,MAE5B,CAACF,EAASpD,MAAOM,EAAMN,QAE1B,IAAMyD,EAAa,WACfhD,EAASrC,EAAWkC,EAAMjC,KAAMiC,EAAMhC,MACtCmC,EAASX,KACTW,EAASlB,MAMPmE,EACiB,IAAnBN,EAASpD,MACL,yBAAKW,UAAU,mBACX,kBAACmC,EAAA,EAAD,CAAQzE,KAAK,SAAS0E,QAAQ,YAAYjC,MAAM,UAAUH,UAAU,aAAaqC,QANpE,WACrBvC,EAAST,EAAMoD,EAASpD,UAKhB,aAKJ,yBAAKW,UAAU,iBACX,kBAAC,EAAD,CAAeuC,KAAM,aAAcD,QAAS,kBAAMQ,OAClD,kBAAC,EAAD,CAAeP,KAAM,eAAgBD,QAAS,kBAAMxC,EAASP,EAAekD,EAASA,cACrF,kBAACN,EAAA,EAAD,CAAQzE,KAAK,QAAQ0E,QAAQ,YAAYjC,MAAM,UAAUH,UAAU,aAAaqC,QAAS,WAAQvC,EAAST,EAAMoD,EAASpD,UAAzH,UAKZ,OACI,6BACI,yBAAKW,UAAU,SACX,yBAAKA,UAAU,cACVyC,EAASb,MAGd,yBAAK5B,UAAU,mBACVnC,KAAKC,KAAK6B,EAAM/B,iBAGzB,yBAAKoC,UAAU,SACX,kBAAC,EAAD,CAAeuC,KAAM,aAAcD,QAAS,kBAAMQ,OACjDC,KCtBFC,EAnCC,WACZ,IAAMrD,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SACnC8C,EAAW7C,aAAY,SAAAC,GAAK,OAAIA,EAAM6C,WAEtC5C,EAAWC,cASXkD,EAAUpF,KAAKqF,MAAMT,EAASb,KAAO,IACrCuB,EAAUV,EAASb,KAAiB,GAAVqB,EAE1BG,EACU,IAAZH,EACI,wBAAIjD,UAAU,YAAd,yBAAgDmD,EAAhD,mCAEA,wBAAInD,UAAU,YAAd,eAAsCiD,EAAtC,gBAA4DE,EAA5D,uBAER,OACI,yBAAKnD,UAAU,WACX,0CACA,wBAAIA,UAAU,YAAd,iCACCoD,EAED,kBAACjB,EAAA,EAAD,CAAQzE,KAAK,SAAS0E,QAAQ,YAAYjC,MAAM,UAAUH,UAAU,eAAeqC,QAtBxE,WACfvC,EAASrC,EAAWkC,EAAMjC,KAAMiC,EAAMhC,MACtCmC,EAASX,KACTW,EAASlB,OAmBL,gB,kCCnBGyE,EAdC,SAAC3D,GACb,OACI,yBAAKM,UAAU,MAAME,MAAO,CAAEoD,MAAO,QAASC,OAAQ,QAASC,gBAAgB,OAAD,OAASC,OACnF,wBAAIzD,UAAU,iBAAd,qEACA,yBAAK0D,IAAKC,IAAOC,IAAI,qBAAqB5D,UAAU,gBACpD,kBAACmC,EAAA,EAAD,CAAQzE,KAAK,SAAS0E,QAAQ,YAAYjC,MAAM,UAAUH,UAAU,aAAaqC,QAAS3C,EAAMmE,OAAhG,4BAGA,uBAAGC,KAAK,0DAAR,gE,2DC+EGC,EA5EQ,WACnB,IAAMtB,EAAW7C,aAAY,SAAAC,GAAK,OAAIA,EAAM6C,WACtC/C,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SACnCG,EAAWC,cAHQ,EAKCM,mBAAS,CAAE1C,IAAKgC,EAAMhC,IAAKD,KAAMiC,EAAMjC,OALxC,mBAKlBmC,EALkB,KAKXW,EALW,KAkCnBwD,EAZc,WAChB,IAAMC,EAAwB,IAAdpE,EAAMlC,IAAY,SAAyB,IAAdkC,EAAMlC,IAAY,SAAW,SACpEuG,EAA2B,IAAdrE,EAAMlC,IAAY,GAAmB,IAAdkC,EAAMlC,IAAY,GAAK,GAC3DwG,EAAYtE,EAAMnC,KAAOmC,EAAMnC,KAErC,OAAQ,yBAAKsC,UAAU,eACnB,wBAAIA,UAAU,uBAAd,gBAAkDiE,EAAlD,KAA6DC,EAA7D,YAAkFC,EAAlF,qBACA,wBAAInE,UAAU,uBAAd,UAA4CnC,KAAKC,KAAMoG,EAAarE,EAAMnC,KAAOmC,EAAMnC,KAAQ,KAA/F,WAKgB0G,GACxB,OACI,yBAAKpE,UAAU,YACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,sBAAsBlD,GAAG,OAAvC,SAAoD+C,EAAMnC,MAC1D,kBAAC2G,EAAA,EAAD,CACIC,aAAc3E,EAAMjC,KACpB6G,KAAM,EACNC,OAAK,EACLC,iBA9BE,SAACtH,GAEf,OAAiB,IAAVA,EAAc,SAAqB,IAAVA,EAAc,SAAW,UA8B7CuH,IAAK,EACLC,IAAK,GACLC,kBAAkB,OAClBC,SAAU,SAAC3D,EAAO4D,GAAetE,EAAS,2BAAKX,GAAN,IAAanC,KAAMoH,SAGpE,yBAAK9E,UAAU,gBACX,yBAAKA,UAAU,qBACX,wBAAIA,UAAU,uBAAd,eAA+D,IAAdH,EAAMlC,IAAY,SAAyB,IAAdkC,EAAMlC,IAAY,SAAW,UAC3G,yBAAKqC,UAAU,OAAO0D,IAnCb,IAAd7D,EAAMlC,IAAYoH,IAAuB,IAAdlF,EAAMlC,IAAYqH,IAASC,IAmCbrB,IAAI,wBAG5C,kBAACS,EAAA,EAAD,CACIC,aAAc3E,EAAMhC,IACpB4G,KAAM,EACNC,OAAK,EACLE,IAAK,EACLC,IAAK,EAELE,SAAU,SAAC3D,EAAO4D,GAAetE,EAAS,2BAAKX,GAAN,IAAalC,IAAKmH,QAG9Dd,GAEL,yBAAKhE,UAAU,mBACX,kBAAC,EAAD,CAAeuC,KAAM,OAAQD,QA/DrB,WTiRE,IAAC5E,EAAMC,EShRzBmC,GTgRmBpC,EShRCmC,EAAMnC,KTgRDC,EShROkC,EAAMlC,ITiRnC,CACHrB,KAAMnB,EAAWQ,YACjB+B,OACAC,SSnRAmC,EAAST,EAAMoD,EAASpD,QACxBS,EAASP,EAAekD,EAASA,iBCgC1ByC,MA7Cf,WACE,IAAMzC,EAAW7C,aAAY,SAAAC,GAAK,OAAIA,EAAM6C,WACtC/C,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAQnCwF,EANY,WAChB,IAAIC,EAAO,KAGX,OAFqB,IAAjBzF,EAAMd,SACRuG,EAAO,kBAAC,EAAD,OACFA,EAEMC,GACTjG,EACJ,yBAAKY,UAAU,WACb,kBAACsF,EAAA,EAAD,OAGE/F,EAAiBkD,EAASA,SAAW,kBAAC,EAAD,MAAqB,KAhBnD,EAkBqBpC,oBAAS,GAlB9B,mBAkBNkF,EAlBM,KAkBKC,EAlBL,KAwCb,OApBA7D,qBAAU,WAIR,OAAO,eAEN,KAIe,IAAd4D,EACE,kBAAC,EAAD,CAAS1B,MAAO2B,IAEhB,yBAAKxF,UAAU,MAAME,MAAO,CAAEsD,gBAAgB,OAAD,OAASC,IAAT,KAAwBgC,SAAU,WAC5ElG,EACAkD,EAASiD,UAAYtG,EAAU+F,EAC/B1C,EAASiD,UAAY,KAAO,yBAAK1F,UAAU,QAAO,kBAAC,EAAD,MAAY,kBAAC,EAAD,MAAlC,KAC7B,uBAAG8D,KAAK,0DAAR,8DCtCU6B,QACW,cAA7B1E,OAAO2E,SAASC,UAEe,UAA7B5E,OAAO2E,SAASC,UAEhB5E,OAAO2E,SAASC,SAASC,MACvB,2D,oBChBAC,GAAe,CACjBpG,MAAO,GACP/B,cAAe,EACfiE,uBAAwB,GACxBlE,IAAK,EACLD,KAAM,EACNyD,KAAM,EACNS,KAAM,EACNvC,MAAO,EACPR,OAAQ,EACR4D,SAAU,GAGRuD,GAAU,SAACnG,EAAO9C,EAAKE,GAIzB,OAHW4C,EAAMF,MAAM5C,GAAKkJ,QAAO,SAAAC,GAC/B,OAAOA,EAAIpJ,KAAJ,UAAcC,EAAd,YAAqBE,OA2ErBkJ,GAvEM,WAAmC,IAAlCtG,EAAiC,uDAAzBkG,GAAcxJ,EAAW,uCAEnD,OAAQA,EAAOD,MAEX,KAAKnB,EAAWC,MACZ,OAAO,2BACAyE,GADP,IAEIF,MAAOpD,EAAOA,OACdqB,cAAerB,EAAOqB,cACtBiE,uBAAwBtF,EAAOiC,qBAC/B2C,KAAM,IAKd,KAAKhG,EAAWE,QACZ,IAAI+K,EAAYvG,EAAMF,MAChB5C,EAAMR,EAAOA,OAAO,GACpB8J,EAAU9J,EAAOA,OAAO,GAC1B+J,EAAWN,GAAQnG,EAAOtD,EAAOA,OAAO,GAAIA,EAAOA,OAAO,IAC9D,GAAyB,IAArB+J,EAAS,GAAGlJ,KAAY,CACxBkJ,EAAS,GAAGjJ,MAAO,EACnB+I,EAAUrJ,GAAKsJ,GAAf,2BAA+BD,EAAUrJ,GAAKsJ,IAA9C,IAAwDhJ,MAAM,IAC9D,IAAMkJ,EAAgB1G,EAAMgC,uBAAyB,EACrD,OAAO,2BAAKhC,GAAZ,IAAmBF,MAAOyG,EAAWvE,uBAAwB0E,IAG7D,sBAAY1G,GAEpB,KAAK1E,EAAWG,cACZ,IAAIkL,EAAkB3G,EAAMF,MACtB8G,EAAWlK,EAAOA,OAAO,GACzBmK,EAAenK,EAAOA,OAAO,GAC/BoK,EAAgBX,GAAQnG,EAAO4G,EAAUC,GAC7C,IAAKC,EAAc,GAAGtJ,KAMlB,OALAsJ,EAAc,GAAGvJ,MAAQ,EACrBuJ,EAAc,GAAGvJ,KAAO,IACxBuJ,EAAc,GAAGvJ,KAAO,GAE5BoJ,EAAgBC,GAAUC,GAA1B,2BAA+CF,EAAgBC,GAAUC,IAAzE,IAAwFtJ,KAAMuJ,EAAc,GAAGvJ,OACxG,2BAAKyC,GAAZ,IAAmBF,MAAO6G,IAGlC,KAAKrL,EAAWM,WACZ,OAAO,2BAAKoE,GAAZ,IAAmBF,MAAOpD,EAAOiB,UAErC,KAAKrC,EAAWI,iBACZ,OAAO,2BAAKsE,GAAZ,IAAmBjC,cAAeiC,EAAMjC,cAAgB,IAE5D,KAAKzC,EAAWK,mBACZ,OAAO,2BAAKqE,GAAZ,IAAmBjC,cAAeiC,EAAMjC,cAAgB,IAG5D,KAAKzC,EAAWQ,YACZ,OAAO,2BAAKkE,GAAZ,IAAmBnC,KAAMnB,EAAOmB,KAAMC,IAAKpB,EAAOoB,MAEtD,KAAKxC,EAAWY,OACZ,OAAO,2BAAK8D,GAAZ,IAAmBF,MAAOpD,EAAOW,QAASmC,MAAO,EAAG8B,KAAM,IAE9D,KAAKhG,EAAWa,OACZ,IAAM4K,EAAW,EACjB,OAAO,2BAAK/G,GAAZ,IAAmBhB,OAAQ+H,EAAUvH,MAAO,IAEhD,KAAKlE,EAAWc,MACZ,OAAO,2BAAK4D,GAAZ,IAAmBhB,OAAQ,EAAGQ,MAAO,IACzC,QACI,OAAO,eAAKQ,KCrFlBkG,GAAe,CACjBnE,KAAM,EACNvC,MAAO,EACPwH,QAAS,EACTC,QAAS,EACTpB,UAAW,EACXjD,SAAU,GAiDC0D,GA9CM,WAAmC,IAAlCtG,EAAiC,uDAAzBkG,GAAcxJ,EAAW,uCACnD,OAAQA,EAAOD,MAEX,KAAK4C,EACD,IAAMwG,GAAa7F,EAAM6F,UACzB,OAAO,2BAAK7F,GAAZ,IAAmB6F,UAAWA,IAGlC,KAAKxG,EACD,IAAM6H,EAAUlH,EAAM+B,KAAO,EAC7B,OAAO,2BACA/B,GADP,IAEI+B,KAAMmF,IAGd,KAAK7H,EACD,OAAO,2BACAW,GADP,IAEI+B,KAAM,EACNvC,MAAO,EACPwH,QAAS,EACTC,QAAS,EACTpB,UAAW,IAGnB,KAAKxG,EACD,IAAMG,EAAQ9C,EAAOiB,QACrB,OAAO,2BACAqC,GADP,IAEIR,MAAOA,IAGf,KAAKH,EACD,IAAMuD,EAAWlG,EAAOiB,QACxB,OAAO,2BACAqC,GADP,IAEI4C,SAAUA,IAKlB,QACI,OAAO,eAAK5C,K,SCvClBmH,GAAcC,0BAAgB,CAElCvE,QAASwE,GACTvH,MAAOwG,KAEHgB,GAAQC,sBACZJ,GACAK,+BAAoBC,0BAAgBC,OAGtCC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SHqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7K,GACL8K,QAAQ9K,MAAMA,EAAM+K,c","file":"static/js/main.f9edff0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rsz_ogmodh0.9da60ef6.png\";","module.exports = __webpack_public_path__ + \"static/media/transparent.fc1bdc17.png\";","module.exports = __webpack_public_path__ + \"static/media/Tbadge-junior.cb90856c.png\";","module.exports = __webpack_public_path__ + \"static/media/Tbadge-senior.047cd48d.png\";","module.exports = __webpack_public_path__ + \"static/media/Tbadge-expert.fbeacfa3.png\";","export const boardTypes = {\n    //BOARD\n    BUILD: 'BUILD',\n    CLICKED: 'CLICKED',\n    RIGHT_CLICKED: \"RIGHT_CLICKED\",\n    REDUCE_MINE_LEFT: 'REDUCE_MINE_LEFT',\n    INCREASE_MINE_LEFT: 'INCREASE_MINE_LEFT',\n    CHECK_CELL: 'CHECK_CELL',\n    EMPTY: 'EMPTY',\n    SAVE_CHANGE: 'SAVE_CHANGE',\n\n\n    //GAME\n    CHANGE_LEVEL: 'CHANGE_LEVEL',\n    CHANGE_SIZE: \"CHANGE_SIZE\",\n    RESTART_GAME: \"RESTART_GAME\",\n    FAILED: 'FAILED',\n    FINISH: 'FINISH',\n    RESET: 'RESET'\n};\n\n","import { boardTypes } from './types';\n\n//------------------GENERAL CELL ACTIONS------------------------\nexport const cellClicked = (cellId) => {\n    const res = cellId.split(\"|\");\n\n    return {\n        type: boardTypes.CLICKED,\n        action: res\n    };\n};\nexport const cellRightClick = (cellId) => {\n    const res = cellId.split(\"|\");\n\n    return {\n        type: boardTypes.RIGHT_CLICKED,\n        action: res\n    }\n};\nexport const reduceMineLeft = () => {\n    return {\n        type: boardTypes.REDUCE_MINE_LEFT,\n\n    };\n};\nexport const increaseMineLeft = () => {\n    return {\n        type: boardTypes.INCREASE_MINE_LEFT,\n\n    };\n};\n\nexport const markCell = () => {\n    return {\n        type: boardTypes.DECREASE,\n    };\n};\n\nconst recCheckCell = (cellId, mat) => {\n    checkCell(cellId.id, mat)\n}\nexport const checkCell = (cellId, mat) => {\n    const res = cellId.split(\"|\");\n    const row = parseInt(res[0]), col = parseInt(res[1])\n    let tempMat = mat;\n    if (mat[res[0]][res[1]].value === 0 && mat[res[0]][res[1]].mark !== 1) {\n        try {\n            if (!tempMat[row - 1][col].open && tempMat[row - 1][col].mark !== 1) { // UP\n                tempMat[row - 1][col].open = true\n                if (tempMat[row - 1][col].value === 0) {\n                    recCheckCell(tempMat[row - 1][col], tempMat)\n                }\n            }\n        } catch (error) {\n            //out of board\n        }\n        try {\n            if (!tempMat[row + 1][col].open && tempMat[row + 1][col].mark !== 1) { // DOWN\n                tempMat[row + 1][col].open = true\n                if (tempMat[row + 1][col].value === 0) {\n                    recCheckCell(tempMat[row + 1][col], tempMat)\n                }\n            }\n        } catch (error) {\n            //out of board\n        }\n        try {\n            if (!tempMat[row][col - 1].open && tempMat[row][col - 1].mark !== 1) { //LEFT\n                tempMat[row][col - 1].open = true\n                if (tempMat[row][col - 1].value === 0) {\n                    recCheckCell(tempMat[row][col - 1], tempMat)\n                }\n            }\n        } catch (error) {\n            //out of board\n        }\n        try {\n            if (!tempMat[row][col + 1].open && tempMat[row][col + 1].mark !== 1) { //RIGHT\n                tempMat[row][col + 1].open = true\n                if (tempMat[row][col + 1].value === 0) {\n                    recCheckCell(tempMat[row][col + 1], tempMat)\n                }\n            }\n        } catch (error) {\n            //out of board\n        }\n        try {\n            if (!tempMat[row - 1][col - 1].open && tempMat[row - 1][col - 1].mark !== 1) { //UP LEFT\n                tempMat[row - 1][col - 1].open = true\n                if (tempMat[row - 1][col - 1].value === 0) {\n                    recCheckCell(tempMat[row - 1][col - 1], tempMat)\n                }\n            }\n        } catch (error) {\n            //out of board\n        }\n        try {\n            if (!tempMat[row - 1][col + 1].open && tempMat[row - 1][col + 1].mark !== 1) { //UP RIGHT\n                tempMat[row - 1][col + 1].open = true\n                if (tempMat[row - 1][col + 1].value === 0) {\n                    recCheckCell(tempMat[row - 1][col + 1], tempMat)\n                }\n            }\n        } catch (error) {\n            //out of board\n        }\n        try {\n            if (!tempMat[row + 1][col + 1].open && tempMat[row + 1][col + 1].mark !== 1) { //DOWN RIGHT\n                tempMat[row + 1][col + 1].open = true\n                if (tempMat[row + 1][col + 1].value === 0) {\n                    recCheckCell(tempMat[row + 1][col + 1], tempMat)\n                }\n            }\n        } catch (error) {\n            //out of board\n        }\n        try {\n            if (!tempMat[row + 1][col - 1].open && tempMat[row + 1][col - 1].mark !== 1) { //DOWN LEFT\n                tempMat[row + 1][col - 1].open = true\n                if (tempMat[row + 1][col - 1].value === 0) {\n                    recCheckCell(tempMat[row + 1][col - 1], tempMat)\n                }\n            }\n        } catch (error) {\n            //out of board\n        }\n    }\n\n    else if (mat[res[0]][res[1]].value >= 15 && mat[res[0]][res[1]].mark !== 1) {\n        tempMat = failed(mat)\n        return {\n            type: boardTypes.FAILED,\n            tempMat\n        };\n    }\n    return {\n        type: boardTypes.CHECK_CELL,\n        payload: tempMat,\n    };\n};\n\n//------------------BUILD------------------------\nexport const buildBoard = (size, lvl) => {\n    //lvl = easy : 12% mines , medium : 20% , hard :30%\n    // size = 9x9 , 5x5 , 12x12 , 20x20\n    const amountOfMines = lvl === 1 ? Math.ceil(0.12 * size * size)\n        : lvl === 2 ? Math.ceil(0.2 * size * size)\n            : Math.ceil(0.30 * size * size)\n    let matrix = [], mineLeft = amountOfMines, amountOfCellToBeOpen = 0;\n    for (let i = 0; i < size; i++) {\n        matrix[i] = [];\n        for (let j = 0; j < size; j++) {\n            matrix[i][j] = { id: `${i}|${j}`, mine: false, open: false, value: 0, mark: 0 };\n        }\n    }\n    while (!(mineLeft === 0)) {\n        let randomLine = Math.ceil(Math.random() * size - 1), randomCol = Math.ceil(Math.random() * size - 1)\n        if (!matrix[randomLine][randomCol].mine) { //if the cell is mine - find a new cell\n            matrix[randomLine][randomCol] = { id: `${randomLine}|${randomCol}`, mine: true, open: false, value: 15, mark: 0 };\n            mineLeft--\n        }\n    }\n    checkAndSetCloseToMine(matrix, size)\n    amountOfCellToBeOpen = (size * size) - amountOfMines\n    return {\n        type: boardTypes.BUILD,\n        action: matrix,\n        amountOfMines,\n        amountOfCellToBeOpen\n    };\n};\n\nconst checkAndSetCloseToMine = (mat, size) => {\n    for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n            try {\n                if (mat[i][j].mine) {//incase mine detect\n                    if (i === 0) { // if first row\n                        if (j === 0) { // top left corner\n                            mat[i][j + 1].value += 1;\n                            mat[i + 1][j].value += 1;\n                            mat[i + 1][j + 1].value += 1;\n                        }\n                        else if (j === mat.length - 1) { // top right corner\n                            mat[i][j - 1].value += 1\n                            mat[i + 1][j].value += 1\n                            mat[i + 1][j - 1].value += 1\n                        }\n                        else {\n                            mat[i][j - 1].value += 1\n                            mat[i][j + 1].value += 1\n                            mat[i + 1][j].value += 1\n                            mat[i + 1][j - 1].value += 1\n                            mat[i + 1][j + 1].value += 1\n                        }\n                    }\n                    else if (i === mat.length - 1) { // if last row\n                        if (j === 0) { // buttom left corner\n                            mat[i][j + 1].value += 1;\n                            mat[i - 1][j].value += 1;\n                            mat[i - 1][j + 1].value += 1;\n                        }\n                        else if (j === mat.length - 1) {\n                            mat[i][j - 1].value += 1; // add 1 value to near by cell\n                            mat[i - 1][j].value += 1;\n                            mat[i - 1][j - 1].value += 1;\n                        }\n                        else {\n                            mat[i][j - 1].value += 1;\n                            mat[i][j + 1].value += 1;\n                            mat[i - 1][j].value += 1;\n                            mat[i - 1][j - 1].value += 1;\n                            mat[i - 1][j + 1].value += 1;\n                        }\n                    }\n                    else if (j === 0) { // left column\n                        mat[i - 1][j].value += 1\n                        mat[i + 1][j].value += 1\n                        mat[i][j + 1].value += 1\n                        mat[i - 1][j + 1].value += 1\n                        mat[i + 1][j + 1].value += 1\n                    }\n                    else if (j === mat.length - 1) { //right column\n                        mat[i - 1][j].value += 1\n                        mat[i + 1][j].value += 1\n                        mat[i][j - 1].value += 1\n                        mat[i - 1][j - 1].value += 1\n                        mat[i + 1][j - 1].value += 1\n                    }// middle matrix\n                    else {\n                        mat[i - 1][j + 1].value += 1\n                        mat[i - 1][j].value += 1\n                        mat[i - 1][j - 1].value += 1\n                        mat[i + 1][j + 1].value += 1\n                        mat[i + 1][j].value += 1\n                        mat[i + 1][j - 1].value += 1\n                        mat[i][j + 1].value += 1\n                        mat[i][j - 1].value += 1\n                    }\n                }\n            } catch (error) {\n                //\n            }\n        }\n    }\n\n}\n\n//------------------GAME------------------------\nexport const failed = (mat) => {\n    let tempMat = mat\n    tempMat.map(row => {\n        row.map(cell => {\n            if (cell.mine) {\n                cell.open = true\n            }\n        })\n    })\n    // return {\n    //     type: boardTypes.FAILED,\n    //     tempMat\n    // };\n    return tempMat\n};\nexport const resetBoard = () => {\n    return {\n        type: boardTypes.RESET,\n    };\n};\nexport const finish = (mat, boardSize, amountOfMines) => {// check if all mines are flagged or all available cells are open\n    let finish = 1, amountOfOpenCells = 0, amountOfCells = boardSize * boardSize\n    const intvalue = Math.ceil(amountOfMines);\n\n    mat.map(row => {\n        row.map(cell => {\n            if (cell.mine) {\n                if (cell.mark !== 1)\n                    finish = 0\n            }\n            else if (cell.open)\n                amountOfOpenCells++\n        })\n    })\n    amountOfOpenCells = amountOfCells - amountOfOpenCells\n    if (finish || intvalue === amountOfOpenCells) { // user put flag on all mines OR reviled all empty cells\n        return {\n            type: boardTypes.FINISH,\n        };\n    }\n    return {\n        type: boardTypes.EMPTY,\n    };\n};\n\n//------------------GENERAL------------------------\n\nexport const saveChange = (size, lvl) => {\n    return {\n        type: boardTypes.SAVE_CHANGE,\n        size,\n        lvl\n    };\n};\n","export const gameTypes = {\n    //GAME\n    TIME: 'TIME',\n    CHANGE_LEVEL: 'CHANGE_LEVEL',\n    CHANGE_SIZE: \"CHANGE_SIZE\",\n    RESTART_GAME: \"RESTART_GAME\",\n    PAUSE: 'PAUSE',\n    LOADING: 'LOADING',\n    SETTINGS: 'SETTINGS',\n}","import { gameTypes } from './types';\n\n\n//------------------GAME------------------------\n\nexport const time = () => {\n    return {\n        type: gameTypes.TIME,\n    };\n};\n\nexport const resetSettings = () => {\n    return {\n        type: gameTypes.RESTART_GAME,\n    };\n};\n\nexport const loading = () => {\n    return {\n        type: gameTypes.LOADING,\n    };\n};\n\n\nexport const pause = (pauseFlag) => {\n    const pause = pauseFlag === 1 ? 0 : 1\n    return {\n        type: gameTypes.PAUSE,\n        payload: pause\n    };\n};\n\n\n\nexport const changeSettings = (settingsFlag) => {\n    const settings = settingsFlag === 1 ? 0 : 1\n    return {\n        type: gameTypes.SETTINGS,\n        payload: settings\n    };\n};\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    cellClicked,\n    cellRightClick,\n    checkCell,\n    reduceMineLeft,\n    increaseMineLeft,\n    finish,\n} from '../../store/board/actions';\nconst MineButton = (props) => {\n    const board = useSelector(state => state.board);\n    const dispatch = useDispatch();\n    const checkBtn = () => {\n        if (!props.cell.open) {\n            if (props.mark === 1) {\n                return <i className=\"fa fa-flag\" aria-hidden=\"true\"></i>\n            }\n            else if (props.mark === 2)\n                return <i className=\"fa fa-question\" aria-hidden=\"true\"></i>\n            else\n                return null\n        }\n        else {\n            if (props.cell.value >= 15)\n                return <i className=\"fa fa-bomb\" aria-hidden=\"true\"></i>;\n            else if (props.cell.value === 0) {\n                return null\n            }\n            else\n                return props.cell.value\n        }\n    }\n\n    const value = checkBtn()\n    const style = {\n        color: props.cell.value >= 15 && props.cell.open ? 'black' : props.cell.value === 1 && props.cell.open ? '#047933' : props.cell.value === 2 && props.cell.open ? '#0c0398' : props.cell.value === 3 && props.cell.open ? 'red' : !props.cell.open && props.cell.mark === 1 ? '#e50808' : !props.cell.open && props.cell.mark === 2 ? '#dbce23' : 'black',\n        backgroundColor: props.cell.mine && props.cell.open ? 'red' : null\n    }\n\n    const [state, setstate] = useState({ longpress: 350, start: 0 })\n\n    const leftClickHandle = () => { // after left click - open cell check the cell and check if finish game\n        dispatch(cellClicked(props.cell.id));\n        dispatch(checkCell(props.cell.id, props.board.board));\n        dispatch(finish(board.board, board.size, board.amountOfMines));\n    }\n    const onMouseDown = (e) => { // when user start ontouch/click\n        e.preventDefault();\n        let tempStart = new Date().getTime();\n        setstate({ ...state, start: tempStart })\n    }\n\n    const onMouseLeave = (e) => {//if user move the mouse/touch\n        e.preventDefault();\n        setstate({ ...state, start: 0 })\n    }\n    const onMouseUp = (e) => { // when click/touch is over\n        e.preventDefault();\n        e = e || window.event;\n        debugger\n        if (!props.cell.open && !board.fail) {\n\n            if (new Date().getTime() >= (state.start + state.longpress)) { // when click/touch is LONG\n                if (board.amountOfMines > 0 || e.target.className === 'fa fa-flag')//mines left or the cell is a flag\n                    dispatch(cellRightClick(props.cell.id));\n                if (props.cell.mark === 1)\n                    dispatch(reduceMineLeft());\n                else if (props.cell.mark === 2) {\n                    dispatch(increaseMineLeft());\n                }\n            } else {// when click/touch is over && SHORT)\n                switch (window.event.which) {\n                    case 0: // touch mobile\n                        leftClickHandle()\n                        break;\n\n                    case 1: // left click\n                        leftClickHandle()\n                        break;\n\n                    case 3: // right click\n                        if (board.amountOfMines > 0 || e.target.className === 'fa fa-flag')//mines left or the cell is a flag\n                            dispatch(cellRightClick(props.cell.id));\n                        if (props.cell.mark === 1 && board.amountOfMines > 0)\n                            dispatch(reduceMineLeft());\n                        else if (props.cell.mark === 2) {\n                            dispatch(increaseMineLeft());\n                        }\n                        break;\n                    default:\n                        return -1\n                }\n            }\n        }\n    }\n\n    return (\n        <button\n            onTouchStart={onMouseDown} onTouchEnd={onMouseUp}\n            onMouseDown={onMouseDown} onMouseLeave={onMouseLeave} onMouseUp={onMouseUp}\n            disabled={props.cell.open}\n            style={style}\n            className={props.cell.mark === 1 ? \"btn flag\" : props.cell.mark === 2 ? 'btn question' : 'btn regular'}>\n            {value}\n        </button>\n    )\n}\n\nexport default MineButton\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    buildBoard,\n    cellClicked,\n    cellRightClick,\n    finish,\n    // resetCounter,\n} from '../../store/board/actions';\nimport {\n    loading\n} from '../../store/game/actions';\nimport MineButton from '../buttons/MineButton';\n\nconst Board = props => {\n    const board = useSelector(state => state.board);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (board.time === 0) {\n            dispatch(loading());\n            dispatch(buildBoard(board.size, board.lvl));\n            dispatch(loading());\n        }\n        return () => null\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [board.lvl, board.size])\n\n    useEffect(() => {\n        if (board.amountOfMines === 0 || board.amountCellShouldBeOpen <= 1)\n            dispatch(finish(board.board, board.size, board.amountOfMines));\n    }, [board.amountOfMines])\n\n    const boardTemplate = board.board.map((row, key) => {\n        return (\n            <div className=\"row\" key={key}>\n                {row.map((cell, key) =>\n                    <div className=\"cell\" key={key} id={cell.id}>\n                        <MineButton board={board} value={cell.value} mark={cell.mark} cell={cell} clicked={() => dispatch(cellClicked(cell.id))} rightClicked={() => dispatch(cellRightClick(cell.id))} />\n                    </div>\n                )}\n            </div>\n        )\n    })\n\n    return (\n        <div>\n            <div className=\"board\">\n                {boardTemplate}\n            </div>\n        </div>\n\n    );\n};\n\nexport default Board;\n","import React from 'react'\nimport Button from '@material-ui/core/Button';\n\nconst GameBtn = (props) => {\n\n    return (\n        <Button size=\"small\" variant=\"contained\" color=\"primary\" className='settingBtn' onClick={props.onclick}>\n            {props.text}\n        </Button>\n    )\n}\n\nexport default GameBtn\n","import React, { useEffect } from 'react'\nimport GamepadButton from '../buttons/GameBtn'\nimport { useSelector, useDispatch } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nimport {\n    changeSettings,\n    time,\n    pause,\n    resetSettings,\n} from '../../store/game/actions';\nimport {\n    buildBoard,\n    resetBoard\n} from '../../store/board/actions';\nconst Settings = () => {\n    const settings = useSelector(state => state.setting);\n    const board = useSelector(state => state.board);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        let interval = null;\n        if (!settings.pause && !board.pause)\n            interval = setInterval(() => {\n                dispatch(time());\n            }, 1000);\n        return () => clearInterval(interval);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [settings.pause, board.pause])\n\n    const restartAll = () => {\n        dispatch(buildBoard(board.size, board.lvl));\n        dispatch(resetSettings())\n        dispatch(resetBoard())\n\n    }\n    const settingsAndPause = () => {\n        dispatch(pause(settings.pause));\n    }\n    const toggle = (\n        settings.pause === 0 ?\n            <div className='settings-toggle'>\n                <Button size=\"medium\" variant=\"contained\" color=\"primary\" className='settingBtn' onClick={settingsAndPause}>\n                    Settings\n            </Button>\n            </div>\n            :\n            <div className=\"settings-btns\">\n                <GamepadButton text={'Start over'} onclick={() => restartAll()} />\n                <GamepadButton text={'Change level'} onclick={() => dispatch(changeSettings(settings.settings))} />\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" className='settingBtn' onClick={() => { dispatch(pause(settings.pause)); }}>\n                    close\n                </Button>\n            </div >\n    )\n    return (\n        <div>\n            <div className=\"stats\" >\n                <div className=\"stats-time\">\n                    {settings.time}\n                </div>\n\n                <div className=\"stats-minesLeft\">\n                    {Math.ceil(board.amountOfMines)}\n                </div>\n            </div>\n            <div className=\"stats\" >\n                <GamepadButton text={'Start over'} onclick={() => restartAll()} />\n                {toggle}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Settings\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nimport {\n    resetSettings,\n} from '../../store/game/actions';\nimport {\n    buildBoard, resetBoard\n} from '../../store/board/actions';\nconst Success = () => {\n    const board = useSelector(state => state.board);\n    const settings = useSelector(state => state.setting);\n\n    const dispatch = useDispatch();\n\n    const restartAll = () => {\n        dispatch(buildBoard(board.size, board.lvl));\n        dispatch(resetSettings())\n        dispatch(resetBoard())\n\n\n    }\n    const minutes = Math.floor(settings.time / 60);\n    const seconds = settings.time - minutes * 60;\n\n    const timeText = (\n        minutes === 0 ?\n            <h2 className=\"sec-text\">WOW! it took you only {seconds} seconds to finish! impresive! </h2>\n            :\n            <h2 className=\"sec-text\">It took you {minutes} minutes and {seconds} seconds  to finish</h2>\n    )\n    return (\n        <div className=\"success\">\n            <h1>Well Done!</h1>\n            <h2 className=\"sec-text\">You did it! You stayed alive!</h2>\n            {timeText}\n\n            <Button size=\"medium\" variant=\"contained\" color=\"primary\" className=\"startOverBtn\" onClick={restartAll}>\n                Play Again\n            </Button>\n        </div>\n    )\n}\n\nexport default Success\n","import React from 'react'\nimport image from '../../images/transparent.png'; // with import\nimport background from '../../images/rsz_ogmodh0.png'\nimport Button from '@material-ui/core/Button';\n\nconst Welcome = (props) => {\n    return (\n        <div className=\"App\" style={{ width: '100vw', height: '100vh', backgroundImage: `src=${background}` }}>\n            <h1 className=\"welcome-title\">Do you have what it takes to clean all the mines and stay alive? </h1>\n            <img src={image} alt=\"army mine sweepers\" className=\"welcome-img\" />\n            <Button size=\"medium\" variant=\"contained\" color=\"primary\" className='settingBtn' onClick={props.close}>\n                IM READY FOR SOME ACTION\n            </Button>\n            <a href='https://www.freepik.com/free-photos-vectors/technology'>Technology vector created by macrovector - www.freepik.com</a>\n\n        </div>\n    )\n}\n\nexport default Welcome\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport Slider from '@material-ui/core/Slider';\nimport GamepadButton from '../buttons/GameBtn'\nimport {\n    saveChange,\n} from '../../store/board/actions';\nimport {\n    pause,\n    changeSettings\n} from '../../store/game/actions';\n\nimport junior from '../../images/Tbadge-junior.png'\nimport senior from '../../images/Tbadge-senior.png'\nimport expert from '../../images/Tbadge-expert.png'\n\nconst ChangeSettings = () => {\n    const settings = useSelector(state => state.setting);\n    const board = useSelector(state => state.board);\n    const dispatch = useDispatch();\n\n    const [state, setstate] = useState({ lvl: board.lvl, size: board.size })\n\n    const saveChanges = () => {\n        dispatch(saveChange(state.size, state.lvl))\n        dispatch(pause(settings.pause))\n        dispatch(changeSettings(settings.settings))\n\n    }\n    const valuetext = (value) => {\n        // const value\n        return value === 1 ? \"Junior\" : value === 2 ? \"Senior\" : \"Expert\";\n    }\n\n    const badge = () => {\n        return state.lvl === 1 ? junior : state.lvl === 2 ? senior : expert;\n\n    }\n    const explanation = () => {\n        const lvlName = state.lvl === 1 ? \"Junior\" : state.lvl === 2 ? \"Senior\" : \"Expert\";\n        const precentage = state.lvl === 1 ? 12 : state.lvl === 2 ? 20 : 30;\n        const noOfCells = state.size * state.size\n\n        return (<div className=\"explanation\">\n            <h2 className=\"explanation-details\">difficulty - {lvlName}: {precentage}% out of {noOfCells} cells (Round up)</h2>\n            <h3 className=\"explanation-summary\">total: {Math.ceil((precentage * state.size * state.size) / 100)} mines</h3>\n        </div>\n        )\n    }\n\n    const explanationHTML = explanation()\n    return (\n        <div className=\"settings\">\n            <div className=\"settingsItem\">\n                <h3 className=\"explanation-summary\" id=\"top\">size: {state.size}</h3>\n                <Slider\n                    defaultValue={board.size}\n                    step={1}\n                    marks\n                    getAriaValueText={valuetext}\n\n                    min={5}\n                    max={13}\n                    valueLabelDisplay=\"auto\"\n                    onChange={(event, newValue) => { setstate({ ...state, size: newValue }) }}\n                />\n            </div>\n            <div className=\"settingsItem\">\n                <div className=\"settingsItem-rank\">\n                    <h3 className=\"explanation-summary\">difficulty: {state.lvl === 1 ? \"Junior\" : state.lvl === 2 ? \"Senior\" : \"Expert\"}</h3>\n                    <img className=\"rank\" src={badge()} alt=\"army mine sweepers\" />\n                </div>\n\n                <Slider\n                    defaultValue={board.lvl}\n                    step={1}\n                    marks\n                    min={1}\n                    max={3}\n                    // valueLabelDisplay=\"auto\"\n                    onChange={(event, newValue) => { setstate({ ...state, lvl: newValue }) }}\n                />\n\n                {explanationHTML}\n            </div>\n            <div className=\"saveChanges-btn\">\n                <GamepadButton text={'Save'} onclick={saveChanges} />\n            </div>\n        </div>\n    )\n}\n\nexport default ChangeSettings\n","import React, { useEffect, useState } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport './App.css';\nimport Board from './components/board/Board';\nimport Settings from './components/game/Settings'\nimport Success from './components/screen/Success';\nimport Welcome from './components/welcome/Welcome';\n\nimport background from './images/rsz_ogmodh0.png'\n\nimport ChangeSettings from './components/game/ChangeSettings'\nimport { useSelector } from 'react-redux';\nfunction App() {\n  const settings = useSelector(state => state.setting);\n  const board = useSelector(state => state.board);\n\n  const checkPage = () => {\n    let page = null\n    if (board.finish === 1)\n      page = <Success />\n    return page\n  }\n  const gameOn = checkPage()\n  const loading = (\n    <div className='loading'>\n      <CircularProgress />\n    </div>\n  )\n  const changeSettings = settings.settings ? <ChangeSettings /> : null\n\n  const [showImage, setShowImage] = useState(true)\n\n  useEffect(() => {\n    // setTimeout(() => {\n    //   setShowImage(false)\n    // }, 3000);\n    return () => {\n    }\n  }, [])\n\n  const appView =\n    (\n      showImage === true ?\n        <Welcome close={setShowImage} />\n        :\n        <div className=\"App\" style={{ backgroundImage: `url(${background})`, overflow: 'hidden' }}>\n          {changeSettings}\n          {settings.isLoading ? loading : gameOn}\n          {settings.isLoading ? null : <div className=\"game\"><Settings /><Board /> </div>}\n          <a href='https://www.freepik.com/free-photos-vectors/background'>Background photo created by jannoon028 - www.freepik.com</a>\n        </div>\n    )\n  return (\n    appView\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { boardTypes } from './types';\n\nconst initialState = {\n    board: [],\n    amountOfMines: 5, // higher number than 0 for initial\n    amountCellShouldBeOpen: 78,\n    lvl: 1,\n    size: 9,\n    fail: 0,\n    time: 0,\n    pause: 0,\n    finish: 0,\n    settings: 0,\n};\n\nconst getCell = (state, row, col) => {\n    let cell = state.board[row].filter(obj => {\n        return obj.id === `${row}|${col}`\n    })\n    return cell\n}\nconst boardReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        //------------------BUILD------------------------\n        case boardTypes.BUILD:\n            return {\n                ...state,\n                board: action.action,\n                amountOfMines: action.amountOfMines,\n                amountCellShouldBeOpen: action.amountOfCellToBeOpen,\n                fail: 0\n            };\n\n        //------------------GENERAL ACTION------------------------\n\n        case boardTypes.CLICKED: // LEFT CLICK \n            let tempBoard = state.board\n            const row = action.action[0]\n            const collumn = action.action[1]\n            let tempCell = getCell(state, action.action[0], action.action[1])// filter and get the specific cell\n            if (tempCell[0].mark !== 1) { // if the cell is flag - dont change anything\n                tempCell[0].open = true\n                tempBoard[row][collumn] = { ...tempBoard[row][collumn], open: true }\n                const newAmountOpen = state.amountCellShouldBeOpen - 1\n                return { ...state, board: tempBoard, amountCellShouldBeOpen: newAmountOpen };\n            }\n            else\n                return { ...state };\n\n        case boardTypes.RIGHT_CLICKED: // RIGHT CLICK\n            let tempDoubleBoard = state.board\n            const rowRIGHT = action.action[0]\n            const collumnRIGHT = action.action[1]\n            let tempCellRIGHT = getCell(state, rowRIGHT, collumnRIGHT)\n            if (!tempCellRIGHT[0].open) {\n                tempCellRIGHT[0].mark += 1; // 0 = null, 1 = flag, 2 = question mark\n                if (tempCellRIGHT[0].mark > 2)\n                    tempCellRIGHT[0].mark = 0;\n\n                tempDoubleBoard[rowRIGHT][collumnRIGHT] = { ...tempDoubleBoard[rowRIGHT][collumnRIGHT], mark: tempCellRIGHT[0].mark }\n                return { ...state, board: tempDoubleBoard };\n\n            }\n        case boardTypes.CHECK_CELL: //get new matrix and update state\n            return { ...state, board: action.payload }\n\n        case boardTypes.REDUCE_MINE_LEFT: // decrease amount of mine left in the game\n            return { ...state, amountOfMines: state.amountOfMines - 1 }\n\n        case boardTypes.INCREASE_MINE_LEFT:// increase amount of mine left in the game\n            return { ...state, amountOfMines: state.amountOfMines + 1 }\n\n        //------------------GAME------------------------\n        case boardTypes.SAVE_CHANGE://change game settings\n            return { ...state, size: action.size, lvl: action.lvl }\n\n        case boardTypes.FAILED: // game end.\n            return { ...state, board: action.tempMat, pause: 1, fail: 1 }\n\n        case boardTypes.FINISH: // game end.\n            const finished = 1\n            return { ...state, finish: finished, pause: 1 }\n\n        case boardTypes.RESET: // game end.\n            return { ...state, finish: 0, pause: 0 }\n        default:\n            return { ...state };\n    }\n\n};\n\nexport default boardReducer;\n","import { gameTypes } from './types';\n\nconst initialState = {\n    time: 0,\n    pause: 0,\n    restart: 0,\n    success: 0,\n    isLoading: 0,\n    settings: 0,\n};\n\nconst boardReducer = (state = initialState, action) => {\n    switch (action.type) {\n        //------------------FLAGS------------------------\n        case gameTypes.LOADING:\n            const isLoading = !state.isLoading\n            return { ...state, isLoading: isLoading }\n        //------------------GAME------------------------\n\n        case gameTypes.TIME:\n            const newTime = state.time + 1\n            return {\n                ...state,\n                time: newTime\n            }\n\n        case gameTypes.RESTART_GAME:\n            return {\n                ...state,\n                time: 0,\n                pause: 0,\n                restart: 0,\n                success: 0,\n                isLoading: 0,\n            }\n\n        case gameTypes.PAUSE:\n            const pause = action.payload\n            return {\n                ...state,\n                pause: pause\n            }\n\n        case gameTypes.SETTINGS:\n            const settings = action.payload\n            return {\n                ...state,\n                settings: settings\n            }\n\n\n\n        default:\n            return { ...state };\n    }\n};\n\nexport default boardReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport boardReducer from './store/board/reducer';\nimport gameReducer from './store/game/reducer';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst rootReducer = combineReducers({\n  // posts: postsReducer,\n  setting: gameReducer,\n  board: boardReducer,\n});\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}